package com.cesgroup.prison.zbgl.mbsz.web;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.cesgroup.prison.common.bean.user.utils.EUserLevel;
import com.cesgroup.prison.zbgl.mbsz.dto.DutyPoliceDto;
import com.cesgroup.prison.zbgl.mbsz.service.AutoGenerateDutyOrderService;
import com.cesgroup.prison.zbgl.rygl.dao.DutyLastFlagMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.cesgroup.framework.dto.AjaxResult;
import com.cesgroup.framework.springmvc.web.BaseEntityDaoServiceCRUDController;
import com.cesgroup.prison.code.tool.DateUtils;
import com.cesgroup.prison.common.bean.user.UserBean;
import com.cesgroup.prison.common.constant.CommonConstant;
import com.cesgroup.prison.common.facade.AuthSystemFacade;
import com.cesgroup.prison.utils.CommonUtil;
import com.cesgroup.prison.utils.DataUtils;
import com.cesgroup.prison.zbgl.mbbm.dao.MbbmMapper;
import com.cesgroup.prison.zbgl.mbbm.entity.MbbmEntity;
import com.cesgroup.prison.zbgl.mbbm.service.MbbmService;
import com.cesgroup.prison.zbgl.mbsz.dao.MbszMapper;
import com.cesgroup.prison.zbgl.mbsz.entity.MbszEntity;
import com.cesgroup.prison.zbgl.mbsz.service.MbszService;
import com.cesgroup.prison.zbgl.mbxq.dao.MbxqMapper;
import com.cesgroup.prison.zbgl.mbxq.entity.MbxqEntity;
import com.cesgroup.prison.zbgl.mbxq.service.MbxqService;
import com.cesgroup.prison.zbgl.rygl.dao.RyglMapper;
import com.cesgroup.prison.zbgl.rygl.entity.RyglEntity;
import com.cesgroup.prison.zbgl.rygl.service.RyglService;
import com.cesgroup.prison.zbgl.rygl.util.RyglConstant;
import com.cesgroup.prison.zbgl.zbbp.entity.ZbbpEntity;
import com.cesgroup.prison.zbgl.zbbp.service.ZbbpService;

import cn.hutool.core.date.DateUtil;

/**
 * 模板管理
 *
 */
@Controller
@RequestMapping(value = "/zbgl/mbsz")
public class MbszController extends BaseEntityDaoServiceCRUDController<MbszEntity, String, MbszMapper, MbszService> {

	private final Logger logger = LoggerFactory.getLogger(MbszController.class);

	@Resource
	private MbszService mbszService;
	@Resource
	private MbbmService mbbmService;
	@Resource
	private MbxqService mbxqService;
	@Resource
	private ZbbpService zbbpService;
	@Resource
	private MbbmMapper mbbmMapper;
	@Resource
	private MbxqMapper mbxqMapper;
	@Resource
	private AutoGenerateDutyOrderService generateDutyOrderService;
	@Resource
	private DutyLastFlagMapper dutyLastFlagMapper;



	@RequestMapping(value = "/toIndex")
	public ModelAndView toIndex(HttpServletRequest request, HttpServletResponse response) {

		ModelAndView mv = new ModelAndView("zbgl/mbsz/index");
		return mv;
	}

	@RequestMapping(value = "/toEdit")
	public ModelAndView toEdit(HttpServletRequest request, HttpServletResponse response) {

		ModelAndView mv = new ModelAndView("zbgl/mbsz/edit");
		mv.addObject("id", request.getParameter("id"));
		return mv;
	}

	@RequestMapping(value = "/toViewModelList")
	public ModelAndView toViewModelList(HttpServletRequest request, HttpServletResponse response) {

		ModelAndView mv = new ModelAndView("zbgl/mbsz/view_modelList");
		mv.addObject("dmdModeId", request.getParameter("dmdModeId"));
		mv.addObject("categoryId", request.getParameter("categoryId"));
		return mv;
	}

	@RequestMapping(value = "/toViewModelInfo")
	public ModelAndView toViewModelInfo(HttpServletRequest request, HttpServletResponse response) {

		ModelAndView mv = new ModelAndView("zbgl/mbsz/view_modelInfo");
		mv.addObject("id", request.getParameter("id"));
		return mv;
	}

	@RequestMapping(value = "/getById")
	@ResponseBody
	public MbszEntity getById(String id,String modelId,String param, HttpServletRequest request, HttpServletResponse response) {
		UserBean user = AuthSystemFacade.getLoginUserInfo();
		MbszEntity mbszEntity = new MbszEntity();        //id 是模板部门表的主键
		MbxqEntity mbxqEntity = new MbxqEntity();
		mbxqEntity.setMojModeId(modelId);
		List<MbxqEntity> mbxqList = mbxqService.findAllList(mbxqEntity);

		if(modelId != "" && modelId != null) {
			mbszEntity = mbszService.getById(modelId);            //modelId模板的主键
		}

		if(param.equals("1")) {
			//用于模板设置
			String orderData = mbxqList.get(0).getMojOrderId()+"-"+mbxqList.get(0).getMojJobId();

			for(int i = 1; i < mbxqList.size(); i++) {

				if (mbxqList.get(i).getMojOrderId().equals(mbxqList.get(i-1).getMojOrderId())){  //同一个班次

					orderData = orderData+","+mbxqList.get(i).getMojJobId();

				} else {

					orderData = orderData+";"+mbxqList.get(i).getMojOrderId()+"-"+mbxqList.get(i).getMojJobId();
					continue;
				}
			}
			mbszEntity.setCdmOrderData(orderData);

		} else if(param.equals("2")) {
			// 用于模值班编排
			String orderData = mbxqList.get(0).getMojOrderId()+"_"+mbxqList.get(0).getDorDutyOrderName()+"_"
					+mbxqList.get(0).getDorStartTime()+"_"+mbxqList.get(0).getDorEndTime()+"-"+mbxqList.get(0).getId()+"_"
					+mbxqList.get(0).getCdjJobName();

			for(int i = 1; i < mbxqList.size(); i++) {

				if (mbxqList.get(i).getMojOrderId().equals(mbxqList.get(i-1).getMojOrderId())) {  //同一个班次

					orderData = orderData+","+mbxqList.get(i).getId()+"_"+mbxqList.get(i).getCdjJobName();

				} else {

					orderData=orderData+";"+mbxqList.get(i).getMojOrderId()+"_"+mbxqList.get(i).getDorDutyOrderName()+"_"
							+mbxqList.get(i).getDorStartTime()+"_"+mbxqList.get(i).getDorEndTime()+"-"+mbxqList.get(i).getId()+"_"
							+mbxqList.get(i).getCdjJobName();
					continue;
				}
			}
			mbszEntity.setCdmOrderData(orderData);

		} else if(param.equals("3")) {
			//用于修改值班编排
			ZbbpEntity zbbpEntity = new ZbbpEntity();
			List<ZbbpEntity> zbbpList = new ArrayList<ZbbpEntity>();
			for (int i = 0; i < mbxqList.size(); i++) {
				zbbpEntity.setDbdDutyModeDepartmentId(id); //模板部门表的主键
				zbbpEntity.setDbdDutyModeOrderJobId(mbxqList.get(i).getId());
				List<ZbbpEntity> zbbpLists=	zbbpService.findAllList(zbbpEntity);
				for(ZbbpEntity zbbp :zbbpLists) {
					zbbpList.add(zbbp);
				}
			}
			//zbbpEntity.setDbdDutyModeDepartmentId(id); //模板部门表的主键
			//zbbpEntity.getDbdDutyModeOrderJobId(mbxqList.get)
			//List<ZbbpEntity> zbbpList =	zbbpService.findAllList(zbbpEntity);
			MbbmEntity mbbmEntity = mbbmMapper.getById(id);

			String orderData = zbbpList.get(0).getMojOrderId()+ "&" +mbxqList.get(0).getDorDutyOrderName()+ "&"
					+mbxqList.get(0).getDorStartTime()+ "&" +mbxqList.get(0).getDorEndTime()+ "*" +zbbpList.get(0).getDbdDutyModeOrderJobId()+ "&"
					+mbxqList.get(0).getCdjJobName()+ "%" +zbbpList.get(0).getDbdStaffId()+ "/" +zbbpList.get(0).getDbdStaffName();
			try {
				int k = 1;
				for(int i = 1;i < zbbpList.size(); i++) {

					if (zbbpList.get(i).getMojOrderId().equals(zbbpList.get(i-1).getMojOrderId())) {  //同一个班次

						if(zbbpList.get(i).getDbdDutyModeOrderJobId().equals(zbbpList.get(i-1).getDbdDutyModeOrderJobId())) {
							orderData = orderData+ "@" +zbbpList.get(i).getDbdStaffId()+ "/" +zbbpList.get(i).getDbdStaffName();
						} else {
							orderData = orderData+ "~" +mbxqList.get(k).getId()+ "&" +mbxqList.get(k).getCdjJobName()+ "%" +zbbpList.get(i).getDbdStaffId()+ "/"
									+zbbpList.get(i).getDbdStaffName();
							k = k+1;
						}
					} else {
						orderData = orderData+ ";" +mbxqList.get(k).getMojOrderId()+ "&" +mbxqList.get(k).getDorDutyOrderName()+ "&"
								+mbxqList.get(k).getDorStartTime()+ "&" +mbxqList.get(k).getDorEndTime()+ "*" +mbxqList.get(k).getId()+ "&"
								+mbxqList.get(k).getCdjJobName()+ "%" +zbbpList.get(i).getDbdStaffId()+ "/" +zbbpList.get(i).getDbdStaffName();
						k = k+1;
						continue;
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			mbszEntity.setCdmOrderData(orderData);
			mbszEntity.setDmdStartDate(mbbmEntity.getDmdStartDate());
			mbszEntity.setDmdEndDate(mbbmEntity.getDmdEndDate());
			if(user.getUserLevel().equals(EUserLevel.PROV)){//省局用户用于提醒本次未值班的人员的情况
				String noDuty =  this.service.selectNodutyByStartDateAndEndDate(request.getParameter("mojStartDate"),request.getParameter("mojEndDate") );
				mbszEntity.setNoDuty(noDuty);
			}


		}else if(param.equals("4")) {//自动排班
			Map<String, List<Map<String,Object>>> orderDatas=this.service.getAutoZbDataNew(request.getParameter("mojStartDate"),request.getParameter("mojEndDate"));
			List<Map<String,Object>> orderData = orderDatas.get("orderData");
			mbszEntity.setMbxqList(mbxqList);
			mbszEntity.setOrderPolices(orderData);
			//统计本次排班的连续值班情况
			String continueDutyMessage = this.service.countcontinueDuty(orderData,request.getParameter("mojStartDate"),request.getParameter("mojEndDate"));
			mbszEntity.setContinueDutyMessage(continueDutyMessage);
			if(user.getUserLevel().equals(EUserLevel.PROV)){//省局用户用于提醒本次未值班的人员的情况
				String noDuty =  this.service.selectNodutyByStartDateAndEndDate(request.getParameter("mojStartDate"),request.getParameter("mojEndDate") );
				mbszEntity.setNoDuty(noDuty);
				mbszEntity.setNoZhzMessage(orderDatas.get("noZhzMessage"));
			}
		}else if(param.equals("5")) {//打印
			List<Map<String, Object>>  dutyPoliceDtos = this.service.getPrintData(mbxqList,id);
			mbszEntity.setOrderPolices(dutyPoliceDtos);
		}


		return mbszEntity;
	}

	@RequestMapping(value = "/searchData")
	@ResponseBody
	public Map<String, Object> searchData(MbszEntity mbszEntity, HttpServletRequest request, HttpServletResponse response) throws Exception {

		UserBean user = AuthSystemFacade.getLoginUserInfo();
		PageRequest pageRequest = buildPageRequest();

		mbszEntity.setCdmCusNumber(user.getOrgCode());
		//mbszEntity.setCdmStatus(CommonConstant.STATUS_VALID_CODE);
		Page<MbszEntity> pageInfo = (Page<MbszEntity>) mbszService.findList(mbszEntity, pageRequest);

		return DataUtils.pageToMap(pageInfo);
	}

	@RequestMapping(value = "/searchAllData")
	@ResponseBody
	public List<MbszEntity> searchAllData(MbszEntity mbszEntity, HttpServletRequest request, HttpServletResponse response) throws Exception {

		UserBean user = AuthSystemFacade.getLoginUserInfo();
		mbszEntity.setCdmCusNumber(user.getOrgCode());
		//mbszEntity.setCdmStatus(CommonConstant.STATUS_VALID_CODE);
		List<MbszEntity> list = mbszService.findAllList(mbszEntity);

		return list;
	}
	/*	@RequestMapping(value = "/saveOrUpdate")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(MbszEntity mbszEntity, HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> resultMap = new HashMap<>();

		try {
			UserBean user = AuthSystemFacade.getLoginUserInfo();
			String id = mbszEntity.getId();
			mbszEntity.setCdmCusNumber(user.getOrgCode());
			mbszEntity.setCdmStatus(CommonConstant.STATUS_VALID_CODE);
			mbszEntity.setCdmCrteUserId(user.getUserId());
			mbszEntity.setCdmCrteTime(new Date());
			mbszEntity.setCdmUpdtUserId(user.getUserId());
			mbszEntity.setCdmUpdtTime(new Date());

			if(id != null && !"".equals(id)) {

				mbszEntity.setId(id);
			}
			mbszService.saveOrUpdate(mbszEntity);
			resultMap.put("code", CommonConstant.SUCCESS_CODE);

		} catch(Exception e) {

			logger.error(e.toString(), e.fillInStackTrace());
			resultMap.put("code", CommonConstant.FAILURE_CODE);
		}
		return resultMap;
	}*/

	@RequestMapping(value = "/saveOrUpdate")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(MbszEntity mbszEntity, HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> resultMap = new HashMap<>();

		try {
			UserBean user = AuthSystemFacade.getLoginUserInfo();
			String id = mbszEntity.getId();
			mbszEntity.setCdmCusNumber(user.getOrgCode());
			/*// mbszEntity.setCdmStatus(CommonConstant.STATUS_VALID_CODE);
			 */			mbszEntity.setCdmCrteUserId(user.getUserId());
			mbszEntity.setCdmCrteTime(new Date());
			mbszEntity.setCdmUpdtUserId(user.getUserId());
			mbszEntity.setCdmUpdtTime(new Date());

			if(id != null && !"".equals(id)) {
				//修改
				MbbmEntity mbbmEntity = new MbbmEntity();
				//mbbmEntity.setDmdStatus(CommonConstant.STATUS_VALID_CODE);
				mbbmEntity.setDmdModeId(id);
				mbbmEntity.setDmdCusNumber(user.getOrgCode());
				List<Map<String, Object>> list = mbbmService.findAllList(mbbmEntity);
				if (list != null && list.size()> 0) {
					resultMap.put("code", "3");
				} else {
					mbszEntity.setId(id);
					mbszService.saveOrUpdate(mbszEntity);
					resultMap.put("code", CommonConstant.SUCCESS_CODE);
				}
			} else {
				mbszService.saveOrUpdate(mbszEntity);
				resultMap.put("code", CommonConstant.SUCCESS_CODE);
			}
		} catch(Exception e) {

			logger.error(e.toString(), e.fillInStackTrace());
			resultMap.put("code", CommonConstant.FAILURE_CODE);
		}
		return resultMap;
	}
		/*@RequestMapping(value = "/saveOrUpdate")
	@ResponseBody
	public Map<String, Object> saveOrUpdate(MbszEntity mbszEntity, HttpServletRequest request, HttpServletResponse response) {

		Map<String, Object> resultMap = new HashMap<>();
		UserBean user;
		try {
			user = AuthSystemFacade.getLoginUserInfo();
		} catch (Exception e) {
			logger.error(e.toString(), e.fillInStackTrace());
			resultMap.put("code", CommonConstant.FAILURE_CODE);
		}
		String id = mbszEntity.getId();

		if(id != null && !"".equals(id)) {
			//修改
			MbbmEntity mbbmEntity = new MbbmEntity();
			mbbmEntity.setDmdStatus(CommonConstant.STATUS_VALID_CODE);
			mbbmEntity.setDmdModeId(id);
			mbbmEntity.setDmdCusNumber(user.getOrgCode());
			List<Map<String, Object>> list = mbbmService.findAllList(mbbmEntity);
			if (list != null && list.size()> 0) {
				resultMap.put("code", "3");
			} else {
				mbszEntity.setId(id);
				try {
					mbszService.saveOrUpdate(mbszEntity);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				resultMap.put("code", CommonConstant.SUCCESS_CODE);
			}
		} else {

		}

		try {

			String id = mbszEntity.getId();
			mbszEntity.setCdmCusNumber(user.getOrgCode());
			//mbszEntity.setCdmStatus(CommonConstant.STATUS_VALID_CODE);
			mbszEntity.setCdmCrteUserId(user.getUserId());
			mbszEntity.setCdmCrteTime(new Date());
			mbszEntity.setCdmUpdtUserId(user.getUserId());
			mbszEntity.setCdmUpdtTime(new Date());

			if(id != null && !"".equals(id)) {
				//修改
				MbbmEntity mbbmEntity = new MbbmEntity();
				mbbmEntity.setDmdStatus(CommonConstant.STATUS_VALID_CODE);
				mbbmEntity.setDmdModeId(id);
				mbbmEntity.setDmdCusNumber(user.getOrgCode());
				List<Map<String, Object>> list = mbbmService.findAllList(mbbmEntity);
				if (list != null && list.size()> 0) {
					resultMap.put("code", "3");
				} else {
					mbszEntity.setId(id);
					mbszService.saveOrUpdate(mbszEntity);
					resultMap.put("code", CommonConstant.SUCCESS_CODE);
				}
			}
		} catch(Exception e) {

			logger.error(e.toString(), e.fillInStackTrace());
			resultMap.put("code", CommonConstant.FAILURE_CODE);
		}
		return resultMap;
	}*/

	@RequestMapping(value = "/deleteById")
	@ResponseBody
	public Map<String, Object> deleteByModeIds(HttpServletRequest request,HttpServletResponse response) {

		String id = request.getParameter("id");     //模板ID
		String param = request.getParameter("param");
		Map<String, Object> resultMap = new HashMap<>();

		try {
			if(param.equals("1")) {
				// 点击 删除模板操作
				MbbmEntity mbbmEntity = new MbbmEntity();
				mbbmEntity.setDmdModeId(id);
				//根据模板id找到模板部门表中的相关记录的主键
				List<Map<String, Object>> list = mbbmService.findAllList(mbbmEntity);
				//模板部门表所有用了该模板的记录
				for(int i = 0; i < list.size(); i++) {

					ZbbpEntity zbbp = new ZbbpEntity();
					//删除值班编排人员  真删
					zbbp.setDbdDutyModeDepartmentId((String) list.get(i).get("ID"));
					zbbpService.deleteByConditions(zbbp);
				}
				mbszService.deleteById(id);                       //删除模板 真删
				mbxqMapper.deleteByConditions(id);                //删除模板 真删
				mbbmService.deleteByConditions(mbbmEntity);       //删除模板部门 真删
				// todo 删除标记表
				// dutyLastFlagMapper.delete();


				resultMap.put("code", CommonConstant.SUCCESS_CODE);
			}else {

			}
		} catch(Exception e) {

			logger.error(e.toString(), e.fillInStackTrace());
			resultMap.put("code", CommonConstant.FAILURE_CODE);
		}
		return resultMap;
	}
	@RequestMapping("/updateSfqyById")
	@ResponseBody
	public AjaxResult updateSfqyById(@RequestParam("id") String id ,@RequestParam("sfqy") String sfqy) {
		try {
			this.service.updateSfqyById(id,sfqy);
			return AjaxResult.success("更新启用状态成功");
		} catch (Exception e) {
			e.printStackTrace();
			return AjaxResult.error("更新启用状态发生异常");
		}
	}

	/**
	 * 查询该模版属于的值班类别下的值班模板是否有别的是启用转态
	 * @param cusNumber
	 * @param id
	 * @return
	 */
	@RequestMapping("/searchSfqy")
	@ResponseBody
	public AjaxResult searchSfqy(@RequestParam("cusNumber") String cusNumber,@RequestParam("id")String id) {
		try {
			AjaxResult ajaxResult =	this.service.searchSfqy(cusNumber,id);
			return ajaxResult;
		} catch (Exception e) {
			return AjaxResult.error("查询启用转态态发生异常");
		}
	}

}
